#+TITLE:      Vitallium's Emacs configuration
#+AUTHOR:     Vitaly Slobodin
#+PROPERTY:   header-args:emacs-lisp :tangle ./init.el
#+TOC:        true

* Contents                                                              :Toc:
- [[#setup][Setup]]
	- [[#early-init][Early init]]
	- [[#startup-optimization][Startup optimization]]
- [[#package-manager][Package manager]]
	- [[#bootstrap-straight-and-straight-use-package][bootstrap straight and straight-use-package]]
- [[#emacs][Emacs]]
	- [[#sane-defaults][Sane defaults]]
	- [[#garbage-collector-magic-hack][Garbage collector magic hack]]
	- [[#no-littering][No littering]]
	- [[#translate-input-sequences-to-english][Translate input sequences to English]]
- [[#interface][Interface]]
	- [[#basics][Basics]]
	- [[#better-undo][Better undo]]
	- [[#navigation][Navigation]]
	- [[#search][Search]]
	- [[#unique-buffer-names][Unique buffer names]]
- [[#appearance][Appearance]]
	- [[#theme][Theme]]
	- [[#emojis][Emojis]]
	- [[#setting-up-some-frame-defaults][Setting up some frame defaults]]
	- [[#ui][UI]]
- [[#programming][Programming]]
	- [[#common][Common]]
	- [[#environment-management][Environment management]]
	- [[#git][Git]]
	- [[#snippets][Snippets]]
- [[#languages][Languages]]
	- [[#web][WEB]]
	- [[#javascript][JavaScript]]
	- [[#vuejs][Vue.js]]
	- [[#json][JSON]]
	- [[#ruby][Ruby]]
	- [[#yaml][YAML]]
	- [[#lsp][LSP]]
	- [[#flycheck][Flycheck]]
	- [[#markdown][Markdown]]
- [[#completion-framework][Completion framework]]
	- [[#selectrum][Selectrum]]
	- [[#prescient][Prescient]]
	- [[#marginalia][Marginalia]]
	- [[#company][Company]]
	- [[#vertico][Vertico]]
- [[#tools][Tools]]
	- [[#vterm][Vterm]]
	- [[#dired][Dired]]
- [[#key-bindings][Key bindings]]
	- [[#which-key][which-key]]
	- [[#mappings][Mappings]]
- [[#configuration-for-built-in-packages][Configuration for built-in packages]]
	- [[#split-right-and-split-below][Split right and split below]]
	- [[#automatically-refreshes-the-buffer-for-changes-outside-of-emacs][Automatically refreshes the buffer for changes outside of Emacs]]
	- [[#mouse-wheel-track-pad-scroll-speed][Mouse wheel (track-pad) scroll speed]]
	- [[#ediff-tweaks][Ediff tweaks]]
	- [[#clean-up-whitespace-on-save][Clean up whitespace on save]]
- [[#org][Org]]
	- [[#toc-sync][TOC sync]]
	- [[#roam][Roam]]

* Setup
** Early init
Taken from DOOM's.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
	;; NOTE: early-init.el is now generated from config.org. Please edit that file instead

	;; In Emacs 27+, package initialization occurs before `user-init-file' is
	;; loaded, but after `early-init-file'. Doom handles package initialization, so
	;; we must prevent Emacs from doing it early!
	(setq package-enable-at-startup nil)

	;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
	(push '(menu-bar-lines . 0) default-frame-alist)
	(push '(tool-bar-lines . 0) default-frame-alist)
	(push '(vertical-scroll-bars) default-frame-alist)

	;; Resizing the Emacs frame can be a terribly expensive part of changing the
	;; font. By inhibiting this, we easily halve startup times with fonts that are
	;; larger than the system default.
	(setq frame-inhibit-implied-resize t)

	;; Disable GUI elements
	(menu-bar-mode -1)
	(tool-bar-mode -1)
	(scroll-bar-mode -1)
	(setq inhibit-splash-screen t)
	(setq use-file-dialog nil)

	;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
	;; compiled ahead-of-time when they are installed and site files are compiled
	;; when gccemacs is installed.
	(setq comp-deferred-compilation nil)
#+END_SRC
** Startup optimization
Taken from DOOM's init
#+begin_src emacs-lisp
	;;; -*- lexical-binding: t -*-
	;; NOTE: init.el is now generated from config.org. Please edit that file instead

	;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
	(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
				url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src
* Package manager
** bootstrap straight and straight-use-package
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
			 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
			(bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
		(with-current-buffer
				(url-retrieve-synchronously
				 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
				 'silent 'inhibit-cookies)
			(goto-char (point-max))
			(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))

	(setq straight-use-package-by-default t)

	(straight-use-package 'use-package)
	;; Load the helper package for commands like `straight-x-clean-unused-repos'
	(require 'straight-x)
#+END_SRC
* Emacs
** Sane defaults
Inspired by https://github.com/natecox/dotfiles/blob/master/emacs/emacs.d/nathancox.org
To debug a LISP function use ~debug-on-entry~. You step /in/ with =d= and /over/ with =e=
#+BEGIN_SRC emacs-lisp
(use-package emacs
	:init
	(setq inhibit-startup-screen t
				initial-scratch-message nil
				sentence-end-double-space nil
				ring-bell-function 'ignore
				frame-resize-pixelwise t)

	(setq user-full-name "Vitaly Slobodin"
				user-mail-address "vslobodin@gitlab.com")

	(setq read-process-output-max (* 1024 1024)) ;; 1mb

	;; always allow 'y' instead of 'yes'.
	(defalias 'yes-or-no-p 'y-or-n-p)

	;; default to utf-8 for all the things
	(set-charset-priority 'unicode)
	(setq locale-coding-system 'utf-8
				coding-system-for-read 'utf-8
				coding-system-for-write 'utf-8)
	(set-terminal-coding-system 'utf-8)
	(set-keyboard-coding-system 'utf-8)
	(set-selection-coding-system 'utf-8)
	(prefer-coding-system 'utf-8)
	(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

	;; write over selected text on input... like all modern editors do
	(delete-selection-mode t)

	;; enable recent files mode.
	(recentf-mode t)
	(setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
													,(expand-file-name "eln-cache/" user-emacs-directory)
													,(expand-file-name "etc/" user-emacs-directory)
													,(expand-file-name "var/" user-emacs-directory)))

	;; don't want ESC as a modifier
	(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

	;; Don't persist a custom file, this bites me more than it helps
	(setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
	(setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
	(setq enable-local-variables :all)     ; fix =defvar= warnings

	;; stop emacs from littering the file system with backup files
	(setq make-backup-files nil
				auto-save-default nil
				create-lockfiles nil)

	;; follow symlinks
	(setq vc-follow-symlinks t)

	;; don't show any extra window chrome
	(when (window-system)
		(tool-bar-mode -1)
		(toggle-scroll-bar -1))

	;; enable winner mode globally for undo/redo window layout changes
	(winner-mode t)

	(show-paren-mode t)

	;; less noise when compiling elisp
	(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

	;; clean up the mode line
	(display-time-mode -1)
	(setq column-number-mode t)

	;; use common convention for indentation by default
	(setq-default indent-tabs-mode t)
	(setq-default tab-width 2)

	(defun crm-indicator (args)
		(cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Grow and shrink minibuffer
	;;(setq resize-mini-windows t)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
				'(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))
#+END_SRC
** Garbage collector magic hack
Used by DOOM to manage garbage collection
#+BEGIN_SRC emacs-lisp
(use-package gcmh
	:diminish " gcmh-mode"
	:init
	(gcmh-mode))
#+END_SRC
** No littering
Keep folders clean.
#+BEGIN_SRC emacs-lisp
(use-package no-littering
	:config
	(with-eval-after-load 'recentf
		(add-to-list 'recentf-exclude no-littering-var-directory)
		(add-to-list 'recentf-exclude no-littering-etc-directory)))

(setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC
** Translate input sequences to English
#+BEGIN_SRC emacs-lisp
(use-package reverse-im
	:custom
	(reverse-im-input-methods '("russian-computer"))
	:config
	(reverse-im-mode))
#+END_SRC
* Interface
** Basics
~crux~ has useful functions extracted from Emacs Prelude. Set ~C-a~ to move to the first non-whitespace character on a line,
and then to toggle between that and the beginning of the line.
#+BEGIN_SRC emacs-lisp
(use-package crux
	 :bind (("C-a" . crux-move-beginning-of-line)
					("C-k" . crux-smart-kill-line)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** Better undo
=undo-tree= visualises undo history as a tree for easy navigation.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
	:diminish
	:init
	(global-undo-tree-mode))
#+END_SRC
** Navigation
One of the most important features of an advanced editor is quick text navigation.
~avy~ lets us jump to any character or line quickly.
#+BEGIN_SRC emacs-lisp
(use-package avy)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package windmove
	:config
	(windmove-default-keybindings))
#+END_SRC
~=ace-window=~ lets us navigate between windows in the same way as ~avy~.
Once activated it has useful sub-modes like ~x~ to switch into window deletion mode.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
	:config
	(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
=Ibuffer= is a general utility for managing buffers, in a similar
manner to the way dired handles files and directories.
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
	:bind
	(("C-x C-b" . ibuffer)))
(use-package ibuffer-vc)
#+END_SRC
~~projectile~~ is the standard package for adding projects
#+BEGIN_SRC emacs-lisp
(use-package ripgrep)
(use-package projectile
	:config
	(projectile-mode)

	(setq projectile-sort-order 'modification-time
				projectile-enable-caching t
				projectile-completion-system 'default)
	:bind-keymap
	("C-c p" . projectile-command-map))

;;(bind-key "C-c p s" 'projectile-ripgrep)

(use-package ibuffer-projectile
	:after projectile)
#+END_SRC
imenu
#+begin_src emacs-lisp
(use-package imenu-anywhere
	:ensure t
	:bind (("C-c i" . imenu-anywhere)
				 ("s-i" . imenu-anywhere)))
#+end_src
** Search
#+BEGIN_SRC emacs-lisp
(use-package ctrlf
	:config
	(ctrlf-mode))
#+END_SRC
** Unique buffer names
#+begin_src emacs-lisp
(use-package uniquify
	:straight (:type built-in)
	:config
	(setq uniquify-buffer-name-style 'forward)
	(setq uniquify-separator "/")
	;; rename after killing uniquified
	(setq uniquify-after-kill-buffer-p t)
	;; don't muck with special buffers
	(setq uniquify-ignore-buffers-re "^\\*"))
#+end_src
* Appearance
** Theme
Recently I found an Emacs port of Visual Studio Code's default theme ~Dark+~.
#+BEGIN_SRC emacs-lisp
(use-package vscode-dark-plus-theme)
(use-package modus-themes)
(load-theme 'modus-operandi)
#+END_SRC
** Emojis
Add emoji support. This is useful when working with html.
#+BEGIN_SRC emacs-lisp
(use-package emojify)
#+END_SRC
** Setting up some frame defaults
Maximise the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
(use-package frame
	:straight (:type built-in)
	:preface
	(defun vitallium/set-default-font ()
		(interactive)
		(when (member "PragmataPro Mono" (font-family-list))
			(set-face-attribute 'default nil :family "PragmataPro Mono"))
		(set-face-attribute 'default nil
												:height 150
												:weight 'normal))
	:config
	(setq initial-frame-alist '((fullscreen . maximized)))
	(vitallium/set-default-font))
#+END_SRC
** UI
*** all the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC
*** Doom modeline (disabled)
#+BEGIN_SRC emacs-lisp :tangle no
(use-package doom-modeline
	:init
	(setq doom-modeline-buffer-encoding nil)
	(setq doom-modeline-height 15)
	(setq doom-modeline-project-detection 'projectile)
	:config
	(doom-modeline-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package moody
	:config
	(setq x-underline-at-descent-line t
				moody-mode-line-height 30)
	(moody-replace-mode-line-buffer-identification)
	(moody-replace-vc-mode))
#+END_SRC
* Programming
** Common
When programming I like my editor to try to help me with keeping parentheses balanced.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
	:config
	(add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC
Highlight parens etc. for improved readability.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
EditorConfig support.
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
	:diminish
	:config
	(editorconfig-mode))
#+END_SRC
** Environment management
By default Emacs doesn't read from the same environment variables set in your terminal. This package fixes that.
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
	:config
	(exec-path-from-shell-initialize))
#+END_SRC
** Git
Magit is an awesome interface to git. Summon it with =C-x g=.
#+BEGIN_SRC emacs-lisp
(use-package magit
	:diminish magit-mode
	:bind
	(("C-x g"   . magit-status)
	 ("C-x C-g" . magit-status)
	 ("s-m j" . magit-dispatch)
	 ("s-m k" . magit-file-dispatch)
	 ("s-m l" . magit-log-buffer-file)
	 ("s-m b" . magit-blame)))
#+END_SRC
Display line changes in gutter based on git history. Enable it everywhere.
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
	:diminish git-gutter-mode
	:config
	(global-git-gutter-mode t))
#+END_SRC
** Snippets
Unlike autocomplete which suggests words / symbols, snippets are pre-prepared templates which you fill in.
Type the shortcut and press =TAB= to complete, or =M-/= to autosuggest a snippet.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
	:diminish yas-minor-mode
	:config
	(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
	(yas-global-mode 1))
#+END_SRC
Install some premade snippets (in addition to personal ones stored above)
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)
#+END_SRC
* Languages
** WEB
#+BEGIN_SRC emacs-lisp
(use-package web-mode
	:mode "\\.[px]?html?\\'"
	:mode "\\.erb\\'"
	:init
	;; If the user has installed `vue-mode' then, by appending this to
	;; `auto-mode-alist' rather than prepending it, its autoload will have
	;; priority over this one.
	(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode) 'append)
	:mode "\\.vue\\'")
#+END_SRC
** JavaScript
=js-doc= makes it easy to add jsdoc comments via =Ctrl+c i=.
#+BEGIN_SRC emacs-lisp
(use-package js-doc
	:bind (:map js2-mode-map
				 ("C-c i" . js-doc-insert-function-doc)
				 ("@" . js-doc-insert-tag)))

(use-package js2-mode
	:mode "\\.js\\'"
	:custom
	(js2-highlight-level 3)
	(js2r-prefer-let-over-var t)
	(js2r-prefered-quote-type 2)
	:config
	(setq js-indent-level 2))

(use-package js2-refactor
	:after js2-mode
	:diminish
	:hook (js2-mode . js2-refactor-mode))
#+END_SRC
We often want to use local packages instead of global ones.
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path)
#+END_SRC
** Vue.js
#+BEGIN_SRC emacs-lisp :tangle no
(use-package vue-mode
	:straight t
	:after web-mode)
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
	:custom
	(json-reformat:indent-width 2)
	:mode ("\\.json\\'" . json-mode))
#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
(use-package ruby-hash-syntax)
(use-package inf-ruby
	:config
	(add-hook 'ruby-mode-hook #'inf-ruby-minor-mode))
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
	:custom
	(setq lsp-keymap-prefix "C-c l")
	(lsp-enable-on-type-formatting nil)
	:hook (
			 (js2-mode . lsp)
			 (ruby-mode . lsp)
			 (yaml-mode . lsp)
			 (lsp-mode . lsp-enable-which-key-integration))
	:commands (lsp lsp-deferred)
	:bind (:map lsp-mode-map
						([remap xref-find-definitions] . lsp-find-definition)
						([remap xref-find-references] . lsp-find-references)))

(use-package lsp-ui
	:after lsp-mode
	:hook ((lsp-mode . lsp-ui-mode))
	:config
		(setq lsp-ui-doc-position 'top))

(use-package dap-mode
	:after lsp-mode
	:hook ((after-init . dap-mode)
				 (dap-mode . dap-ui-mode)))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
	:diminish
	:hook (prog-mode . flycheck-mode)
	:config
	(setq flycheck-idle-change-delay 0.5))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
(use-package markdown-toc
	:after markdown-mode)
#+END_SRC
* Completion framework
** Selectrum
Selectrum is a better solution for incremental narrowing in Emacs, replacing Helm, Ivy, and Ido.
#+BEGIN_SRC emacs-lisp
(use-package selectrum
	:config
	(setq enable-recursive-minibuffers t)
	:init
	(selectrum-mode t))
#+END_SRC
** Prescient
#+BEGIN_SRC emacs-lisp
(use-package selectrum-prescient
	:after selectrum
	:config
	(setq selectrum-fix-vertical-window-height t)
	(selectrum-prescient-mode t)
	(prescient-persist-mode t))
#+end_src
Company integration
#+begin_src emacs-lisp :tangle no
(use-package company-prescient
	:after company
	:config
	(company-prescient-mode t))
#+END_SRC
** Marginalia
~Marginalia~ adds annotations to minibuffers.
#+BEGIN_SRC emacs-lisp
(use-package marginalia
	:init (marginalia-mode)
	:bind (("M-A" . marginalia-cycle)
				 :map minibuffer-local-map
				 ("M-A" . marginalia-cycle)))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
	:diminish company-mode
	:config
	(setq company-minimum-prefix-length 1)
	(setq company-idle-delay 0.0)
	(setq company-tooltip-align-annotations t)
	;; don't autocomplete when single candidate
	(setq company-auto-complete nil)
	(setq company-auto-complete-chars nil)
	(setq company-dabbrev-code-other-buffers nil)
	(setq company-backends '((company-capf company-keywords company-files :with company-yasnippet)))
	:bind
	(:map company-mode-map
				("C-;" . company-complete))
	(:map company-active-map
				("TAB"      . company-complete-common-or-cycle)
				([tab]      . company-complete-common-or-cycle)
				("S-TAB"    . company-select-previous-or-abort)
				([backtab]  . company-select-previous-or-abort)
				([S-tab]    . company-select-previous-or-abort)
				("C-p"      . company-select-previous-or-abort)
				("C-n"      . company-select-next-or-abort)
				("C-p"      . company-select-previous))
	:config
	(global-company-mode t))
#+END_SRC
** Vertico
#+begin_src emacs-lisp
(use-package vertico
	:init
	(vertico-mode))
#+end_src
Use the =orderless= completion style.
#+begin_src emacs-lisp
(use-package orderless
	:after vertico
	:init
	(setq completion-styles '(orderless)
				completion-category-defaults nil
				completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
* Tools
** Vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library.
#+BEGIN_SRC emacs-lisp
(use-package vterm
	:config
	(setq vterm-shell (executable-find "fish")
				vterm-max-scrollback 10000))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
	:straight (:type built-in)
	:hook (dired-mode . dired-hide-details-mode))

(use-package dired-single
	:after dired)

(use-package all-the-icons-dired
	:hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
	:hook (dired-mode . dired-hide-dotfiles-mode))
#+END_SRC
* Key bindings
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:diminish which-key-mode
	:config
	(setq which-key-separator " ")
	(setq which-key-prefix-prefix "+")
	:init
	(which-key-mode))
#+END_SRC
#+END_SRC
** Mappings
Here we define all prefix keys. The setup here is similar to the
leader key system present in ~Spacemacs~ or ~Doom Emacs~, except made
for use with regular Emacs keys.
#+BEGIN_SRC emacs-lisp
(bind-key "M-g g" 'goto-line)
(bind-key "M-g a" 'avy-goto-line)
#+END_SRC
* Configuration for built-in packages
** Split right and split below
The Emacs default split doesn't seem too intuitive for most users.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package window
	:straight (:type built-in)
	:preface
	(defun vitallium/split-and-follow-horizontally ()
		"Split window below."
		(interactive)
		(split-window-below)
		(other-window 1))
	(defun vitallium/split-and-follow-vertically ()
		"Split window right."
		(interactive)
		(split-window-right)
		(other-window 1))
	:config
	(global-set-key (kbd "C-x 2") #'vitallium/split-and-follow-horizontally)
	(global-set-key (kbd "C-x 3") #'vitallium/split-and-follow-vertically))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
(use-package autorevert
	:straight (:type built-in)
	:config
	(setq auto-revert-interval 2
				auto-revert-check-vc-info t
				global-auto-revert-non-file-buffers t
				auto-revert-verbose nil)
	:init
	(global-auto-revert-mode +1))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
(use-package mwheel
	:straight (:type built-in)
	:config
	(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
				mouse-wheel-progressive-speed nil))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
(use-package ediff
	:straight (:type built-in)
	:config
	(setq ediff-window-setup-function #'ediff-setup-windows-plain)
	(setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
	:straight (:type built-in)
	:hook (before-save . whitespace-cleanup))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
(use-package org
	:straight t
	:config
	(setq org-directory "~/org"
				org-agenda-files (directory-files-recursively "~/org/" "\\.org$")
				org-hide-emphasis-markers t
				org-indent-indentation-per-level 1
				org-src-tab-acts-natively t
				org-src-preserve-indentation t
				org-edit-src-content-indentation 0
				org-confirm-babel-evaluate nil)
	:bind
	(("C-c n c" . org-capture)))
#+END_SRC
Org agenda
#+begin_src emacs-lisp
(use-package org-agenda
	:straight (:type built-in)
	:after org
	:custom
		(org-agenda-prefix-format '((agenda . " %i %-20:c%?-12t%-6e% s")
					(todo   . " %i %-20:c %-6e")
					(tags   . " %i %-20:c")
					(search . " %i %-20:c"))))
#+end_src
** TOC sync
#+BEGIN_SRC emacs-lisp
(use-package toc-org
	:straight t
	:commands toc-org-enable
	:init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC
** Roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
	:straight t
	:custom
	(org-roam-directory "~/org/")
	:bind (:map org-roam-mode-map
						(("C-c n l" . org-roam)
						 ("C-c n f" . org-roam-find-file)
						 ("C-c n g" . org-roam-graph))
						:map org-mode-map
						(("C-c n i" . org-roam-insert))
						(("C-c n I" . org-roam-insert-immediate))))
#+END_SRC
